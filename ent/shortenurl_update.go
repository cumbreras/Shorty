// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/cumbreras/shortener/ent/predicate"
	"github.com/cumbreras/shortener/ent/shortenurl"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// ShortenURLUpdate is the builder for updating ShortenURL entities.
type ShortenURLUpdate struct {
	config
	hooks      []Hook
	mutation   *ShortenURLMutation
	predicates []predicate.ShortenURL
}

// Where adds a new predicate for the builder.
func (suu *ShortenURLUpdate) Where(ps ...predicate.ShortenURL) *ShortenURLUpdate {
	suu.predicates = append(suu.predicates, ps...)
	return suu
}

// SetURL sets the URL field.
func (suu *ShortenURLUpdate) SetURL(s string) *ShortenURLUpdate {
	suu.mutation.SetURL(s)
	return suu
}

// SetCode sets the Code field.
func (suu *ShortenURLUpdate) SetCode(u uuid.UUID) *ShortenURLUpdate {
	suu.mutation.SetCode(u)
	return suu
}

// Mutation returns the ShortenURLMutation object of the builder.
func (suu *ShortenURLUpdate) Mutation() *ShortenURLMutation {
	return suu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (suu *ShortenURLUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(suu.hooks) == 0 {
		affected, err = suu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShortenURLMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suu.mutation = mutation
			affected, err = suu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(suu.hooks) - 1; i >= 0; i-- {
			mut = suu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (suu *ShortenURLUpdate) SaveX(ctx context.Context) int {
	affected, err := suu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (suu *ShortenURLUpdate) Exec(ctx context.Context) error {
	_, err := suu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suu *ShortenURLUpdate) ExecX(ctx context.Context) {
	if err := suu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suu *ShortenURLUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shortenurl.Table,
			Columns: shortenurl.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shortenurl.FieldID,
			},
		},
	}
	if ps := suu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shortenurl.FieldURL,
		})
	}
	if value, ok := suu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: shortenurl.FieldCode,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, suu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shortenurl.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ShortenURLUpdateOne is the builder for updating a single ShortenURL entity.
type ShortenURLUpdateOne struct {
	config
	hooks    []Hook
	mutation *ShortenURLMutation
}

// SetURL sets the URL field.
func (suuo *ShortenURLUpdateOne) SetURL(s string) *ShortenURLUpdateOne {
	suuo.mutation.SetURL(s)
	return suuo
}

// SetCode sets the Code field.
func (suuo *ShortenURLUpdateOne) SetCode(u uuid.UUID) *ShortenURLUpdateOne {
	suuo.mutation.SetCode(u)
	return suuo
}

// Mutation returns the ShortenURLMutation object of the builder.
func (suuo *ShortenURLUpdateOne) Mutation() *ShortenURLMutation {
	return suuo.mutation
}

// Save executes the query and returns the updated entity.
func (suuo *ShortenURLUpdateOne) Save(ctx context.Context) (*ShortenURL, error) {
	var (
		err  error
		node *ShortenURL
	)
	if len(suuo.hooks) == 0 {
		node, err = suuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShortenURLMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suuo.mutation = mutation
			node, err = suuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suuo.hooks) - 1; i >= 0; i-- {
			mut = suuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suuo *ShortenURLUpdateOne) SaveX(ctx context.Context) *ShortenURL {
	node, err := suuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suuo *ShortenURLUpdateOne) Exec(ctx context.Context) error {
	_, err := suuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suuo *ShortenURLUpdateOne) ExecX(ctx context.Context) {
	if err := suuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suuo *ShortenURLUpdateOne) sqlSave(ctx context.Context) (_node *ShortenURL, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shortenurl.Table,
			Columns: shortenurl.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shortenurl.FieldID,
			},
		},
	}
	id, ok := suuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ShortenURL.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shortenurl.FieldURL,
		})
	}
	if value, ok := suuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: shortenurl.FieldCode,
		})
	}
	_node = &ShortenURL{config: suuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shortenurl.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
