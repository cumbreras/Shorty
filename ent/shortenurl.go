// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/cumbreras/shortener/ent/shortenurl"
	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// ShortenURL is the model entity for the ShortenURL schema.
type ShortenURL struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// URL holds the value of the "URL" field.
	URL string `json:"URL,omitempty"`
	// Code holds the value of the "Code" field.
	Code uuid.UUID `json:"Code,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShortenURL) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // URL
		&uuid.UUID{},      // Code
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShortenURL fields.
func (su *ShortenURL) assignValues(values ...interface{}) error {
	if m, n := len(values), len(shortenurl.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	su.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field URL", values[0])
	} else if value.Valid {
		su.URL = value.String
	}
	if value, ok := values[1].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field Code", values[1])
	} else if value != nil {
		su.Code = *value
	}
	return nil
}

// Update returns a builder for updating this ShortenURL.
// Note that, you need to call ShortenURL.Unwrap() before calling this method, if this ShortenURL
// was returned from a transaction, and the transaction was committed or rolled back.
func (su *ShortenURL) Update() *ShortenURLUpdateOne {
	return (&ShortenURLClient{config: su.config}).UpdateOne(su)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (su *ShortenURL) Unwrap() *ShortenURL {
	tx, ok := su.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShortenURL is not a transactional entity")
	}
	su.config.driver = tx.drv
	return su
}

// String implements the fmt.Stringer.
func (su *ShortenURL) String() string {
	var builder strings.Builder
	builder.WriteString("ShortenURL(")
	builder.WriteString(fmt.Sprintf("id=%v", su.ID))
	builder.WriteString(", URL=")
	builder.WriteString(su.URL)
	builder.WriteString(", Code=")
	builder.WriteString(fmt.Sprintf("%v", su.Code))
	builder.WriteByte(')')
	return builder.String()
}

// ShortenURLs is a parsable slice of ShortenURL.
type ShortenURLs []*ShortenURL

func (su ShortenURLs) config(cfg config) {
	for _i := range su {
		su[_i].config = cfg
	}
}
